#!/usr/bin/python3
# emojimenu - Display an emoji entry menu using rofi
#
# Functionally equivalent to rofi-emoji but uses python instead of jq and sh

# Copyright (c) 2017 Denis Kasak
# Distributed under the ISC licence.

# requires python, rofi, xdotool
#
# Also requires an emoji definition file. These are currently supported:
# 1. https://raw.githubusercontent.com/emojione/emojione/master/emoji.json
# 2. https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json
#
# 1 is more complete than 2.

# INSTALL:
#   1. mkdir -p "$XDG_DATA_HOME"
#   2. cp emoji.json $XDG_DATA_HOME/emoji.json

import json
import subprocess
import os

# SETTINGS
#
# values:
#   - method: type, paste
#   - register: clipboard, primary
#   - key: any key mnemonic accepted by xdotool

paste_methods = {
    "termite": {"method":   "type"},           # noqa
    "kitty":   {"method":   "paste",           # noqa
                "register": "primary",         # noqa
                "key":      "Shift+Insert"},   # noqa
}

default_method = {"method": "paste",
                  "register": "clipboard",
                  "key": "Control+v"}


def gemoji_parser(emoji_def):
    category = '{:>10}'.format('|' + emoji_def['category'] + '|')
    emoji = emoji_def['emoji']
    desc = emoji_def['description']

    if emoji_def['tags']:
        tags = (tag for tag in emoji_def['tags'] if tag != desc)
        formatted_tags = '[' + ', '.join(tags) + ']'
    else:
        formatted_tags = ''

    return f'{category} {emoji} {desc} {formatted_tags}'


def emojione_parser(emoji_def):
    category = '{:>10}'.format('|' + emoji_def['category'].title() + '|')

    chars = emoji_def['code_points']['base'].split('-')
    emoji = ''.join(chr(int(c, 16)) for c in chars)

    desc = emoji_def['name']

    if (emoji_def['keywords']
            and emoji_def['keywords']
            and emoji_def['keywords'][0]):
        tags = (tag for tag in emoji_def['keywords'] if tag != desc)
        formatted_tags = '[' + ', '.join(tags) + ']'
    else:
        formatted_tags = ''

    return f'{category} {emoji} {desc} {formatted_tags}'


def sort_by_category(emoji):
    category = emoji['category'].title()
    order = ["People",
             "Nature",
             "Food",
             "Objects",
             "Activity",
             "Regional",
             "Symbols",
             "Travel",
             "Flags",
             "Modifier"]
    return order.index(category)


def focused_window_classes():
    # get the currently focused window class
    window_id = subprocess.check_output(["xdotool", "getwindowfocus"])
    classes = subprocess.check_output(["xprop", "-id", window_id, "WM_CLASS"],
                                      encoding="utf-8")
    classes = [c.strip('"')
               for c in classes.split('=', 1)[1].strip().split(', ')]

    return classes


def determine_method(classes):
    for c in classes:
        method = paste_methods.get(c)
        if method:
            return method

    return default_method


xdg_data_home = os.getenv('XDG_DATA_HOME')
if not xdg_data_home:
    xdg_data_home = os.path.join(os.getenv('HOME'), '.local', 'share')

emoji_file = os.path.join(xdg_data_home, 'emoji.json')

# load emoji data
emojis = json.load(open(emoji_file))

# pick appropriate parser and load emoji definitions
if 'description' in next(iter(emojis)):
    emoji_menu_item = gemoji_parser
    emoji_menu_items = [emoji_menu_item(e) for e in emojis
                        if 'description' in e
                        if 'emoji' in e]
else:
    emoji_menu_item = emojione_parser
    emojis = sorted((v for k, v in emojis.items() if len(k) > 4),
                    key=sort_by_category)
    emoji_menu_items = [emoji_menu_item(e) for e in emojis]

# display menu
rofi_cmd = ['rofi', '-sync', '-dmenu', '-i', '-lines', '10', '-p', 'emoji']
selection = subprocess.check_output(rofi_cmd,
                                    input='\n'.join(emoji_menu_items),
                                    encoding="utf-8")


# strip newline
selection = selection.rstrip()
emoji = selection.split('|')[2].strip().split()[0]

paste_method = determine_method(focused_window_classes())

if paste_method['method'] == 'type':
    # type the emoji
    subprocess.call(['xdotool', 'type', emoji])
elif paste_method['method'] == 'paste':
    register = paste_method.get('register', 'clipboard')
    flag = '-b' if register == 'clipboard' else '-p'

    # put the emoji into the clipboard, saving the current clipboard content
    saved_clipboard = subprocess.check_output(['xsel', '-io', flag],
                                              input=emoji,
                                              encoding="utf-8")

    # tell the program to paste
    subprocess.call(['xdotool', 'key', paste_method['key']])

    # restore the clipboard
    subprocess.check_output(["xsel", "-i", flag],
                            input=saved_clipboard,
                            encoding="utf-8")
